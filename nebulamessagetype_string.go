// Code generated by "stringer -type NebulaMessageType,NebulaMessageSubType"; DO NOT EDIT.

package nebula

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[handshake-0]
	_ = x[message-1]
	_ = x[recvError-2]
	_ = x[lightHouse-3]
	_ = x[test-4]
	_ = x[closeTunnel-5]
}

const _NebulaMessageType_name = "handshakemessagerecvErrorlightHousetestcloseTunnel"

var _NebulaMessageType_index = [...]uint8{0, 9, 16, 25, 35, 39, 50}

func (i NebulaMessageType) String() string {
	if i >= NebulaMessageType(len(_NebulaMessageType_index)-1) {
		return "NebulaMessageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NebulaMessageType_name[_NebulaMessageType_index[i]:_NebulaMessageType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[testRequest-0]
	_ = x[testReply-1]
	_ = x[handshakeIXPSK0-2]
	_ = x[handshakeXXPSK0-3]
}

const _NebulaMessageSubType_name = "testRequesttestReplyhandshakeIXPSK0handshakeXXPSK0"

var _NebulaMessageSubType_index = [...]uint8{0, 11, 20, 35, 50}

func (i NebulaMessageSubType) String() string {
	if i >= NebulaMessageSubType(len(_NebulaMessageSubType_index)-1) {
		return "NebulaMessageSubType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NebulaMessageSubType_name[_NebulaMessageSubType_index[i]:_NebulaMessageSubType_index[i+1]]
}
